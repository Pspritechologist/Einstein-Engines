// <auto-generated>
//
// This file was automatically generated by Interoptopus.
//
// Library:      iterasm
// Hash:         0x633354f05290c41c
// Namespace:
// Builder:      interoptopus_backend_csharp
//
// Do not edit this file manually.
//
// </auto-generated>


#pragma warning disable 0105
using System;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;
using System.Runtime.CompilerServices;
using Content.Server._EE.Iterasm.Binds;
using Content.Server._EE.Iterasm.Binds;
#pragma warning restore 0105

namespace Content.Server._EE.Iterasm.Binds
{
    public static partial class Interop
    {
        public const string NativeLib = "iterasm";

        static Interop()
        {
            var api_version = Interop.pattern_api_guard();
            if (api_version != 0x633354f05290c41c)
            {
                throw new TypeLoadException($"API reports hash 0x{api_version:X} which differs from hash in bindings (0x633354f05290c41c). You probably forgot to update / copy either the bindings or the library.");
            }
        }



        [LibraryImport(NativeLib, EntryPoint = "interoptopus_string_create")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_string_create(IntPtr utf8, ulong len, ref Utf8String rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_string_destroy")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_string_destroy(Utf8String utf8);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_string_clone")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_string_clone(ref Utf8String utf8, ref Utf8String rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_create_12067441055402414473")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_create_12067441055402414473(IntPtr data, ulong len, ref VecUtf8String rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_destroy_6640468371169161290")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_destroy_6640468371169161290(VecUtf8String ignored);


        [LibraryImport(NativeLib, EntryPoint = "pattern_api_guard")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ulong pattern_api_guard();


        [LibraryImport(NativeLib, EntryPoint = "state_pc")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultU64Utf8String state_pc(IntPtr state);


        [LibraryImport(NativeLib, EntryPoint = "state_jump")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultUtf8String state_jump(IntPtr state, long offset);


        [LibraryImport(NativeLib, EntryPoint = "state_jump_to")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultUtf8String state_jump_to(IntPtr state, ulong loc);


        [LibraryImport(NativeLib, EntryPoint = "state_enter_frame")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultUtf8String state_enter_frame(IntPtr state, ushort len, long store);


        [LibraryImport(NativeLib, EntryPoint = "state_exit_frame")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultI64Utf8String state_exit_frame(IntPtr state);


        [LibraryImport(NativeLib, EntryPoint = "state_frame_size")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultU64Utf8String state_frame_size(IntPtr state);


        [LibraryImport(NativeLib, EntryPoint = "state_get_stack")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultSliceU8Utf8String state_get_stack(IntPtr state);


        [LibraryImport(NativeLib, EntryPoint = "state_get_frame")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultOptionFrameUtf8String state_get_frame(IntPtr state, ulong index);


        [LibraryImport(NativeLib, EntryPoint = "state_incr")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultUtf8String state_incr(IntPtr state);


        [LibraryImport(NativeLib, EntryPoint = "state_get")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultI64Utf8String state_get(IntPtr state, ushort index);


        [LibraryImport(NativeLib, EntryPoint = "state_set")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultUtf8String state_set(IntPtr state, ushort index, long new_value);


        [LibraryImport(NativeLib, EntryPoint = "state_alloc")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultU64Utf8String state_alloc(IntPtr state, ulong len);


        [LibraryImport(NativeLib, EntryPoint = "state_dealloc")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultUtf8String state_dealloc(IntPtr state, ulong addr);


        [LibraryImport(NativeLib, EntryPoint = "state_read")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultSliceMutU8Utf8String state_read(IntPtr state, ulong addr, nuint len);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "iterasm_vm_destroy")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultConstPtrIterasmVmUtf8String iterasm_vm_destroy(IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "iterasm_vm_compile")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultConstPtrIterasmVmUtf8String iterasm_vm_compile(Utf8String src, CustomOpsCallback custom_ops);

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe ResultConstPtrIterasmVmUtf8String iterasm_vm_compile(Utf8String src, CustomOpsCallbackDelegate custom_ops)
        {
            var custom_ops_wrapped = new CustomOpsCallback(custom_ops);
            try
            {
                return iterasm_vm_compile(src, custom_ops_wrapped);
            }
            finally
            {
                custom_ops_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "iterasm_vm_run_to_completion")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultUtf8String iterasm_vm_run_to_completion(IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "iterasm_vm_run_step")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultUtf8String iterasm_vm_run_step(IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "iterasm_vm_get_state")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultMutPtrIterasmStateVoid iterasm_vm_get_state(IntPtr _context);


    }

    public partial struct Frame
    {
        ulong frame;
        SliceMutU8 bytes;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Frame : IDisposable
    {
        public Frame() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.frame = frame;
            _unmanaged.bytes = bytes.ToUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.frame = frame;
            _unmanaged.bytes = bytes.ToUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public ulong frame;
            public SliceMutU8.Unmanaged bytes;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Frame ToManaged()
            {
                var _managed = new Frame();
                _managed.frame = frame;
                _managed.bytes = bytes.ToManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            bytes.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Frame { ... }";
        }

        [CustomMarshaller(typeof(Frame), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Frame _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Frame managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Frame managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Frame ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial class SliceU8
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SliceU8 : IEnumerable<byte>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<byte> ReadOnlySpan
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe byte this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<byte>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<byte>()));
            }

        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        SliceU8() { }

        public static SliceU8 From(IntPtr data, ulong len)
        {
            var rval = new SliceU8();
            rval._data = data;
            rval._len = len;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static SliceU8 From(byte[] managed)
        {
            var rval = new SliceU8();
            rval._handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            rval._data = rval._handle.AddrOfPinnedObject();
            rval._len = (ulong) managed.Length;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
            _data = IntPtr.Zero;
        }

        internal Unmanaged ToUnmanaged()
        {
            var unmanaged = new Unmanaged();
            unmanaged._data = _data;
            unmanaged._len = _len;
            return unmanaged;
        }


        [CustomMarshaller(typeof(SliceU8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr _data;
            public ulong _len;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal SliceU8 ToManaged()
            {
                return SliceU8.From(_data, _len);
            }
        }

        public ref struct Marshaller
        {
            private SliceU8 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(SliceU8 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(SliceU8 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public SliceU8 ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

        public static class SliceU8Extensions
        {
            public static SliceU8 Slice(this byte[] s) { return SliceU8.From(s); }
        }


    public partial class SliceMutU8
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SliceMutU8 : IEnumerable<byte>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<byte> ReadOnlySpan
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe byte this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<byte>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<byte>()));
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                Unsafe.Write<byte>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<byte>()), value);
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        SliceMutU8() { }

        public static SliceMutU8 From(IntPtr data, ulong len)
        {
            var rval = new SliceMutU8();
            rval._data = data;
            rval._len = len;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static SliceMutU8 From(byte[] managed)
        {
            var rval = new SliceMutU8();
            rval._handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            rval._data = rval._handle.AddrOfPinnedObject();
            rval._len = (ulong) managed.Length;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
            _data = IntPtr.Zero;
        }

        internal Unmanaged ToUnmanaged()
        {
            var unmanaged = new Unmanaged();
            unmanaged._data = _data;
            unmanaged._len = _len;
            return unmanaged;
        }


        [CustomMarshaller(typeof(SliceMutU8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr _data;
            public ulong _len;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal SliceMutU8 ToManaged()
            {
                return SliceMutU8.From(_data, _len);
            }
        }

        public ref struct Marshaller
        {
            private SliceMutU8 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(SliceMutU8 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(SliceMutU8 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public SliceMutU8 ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

        public static class SliceMutU8Extensions
        {
            public static SliceMutU8 SliceMut(this byte[] s) { return SliceMutU8.From(s); }
        }


    ///Option that contains Some(value) or None.
    public partial struct OptionFrame
    {
        uint _variant;
        Frame _Some;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct OptionFrame : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedSome
        {
            internal uint _variant;
            internal Frame.Unmanaged _Some;
        }


        public void Dispose()
        {
            if (_variant == 0) { _Some.Dispose(); }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedSome _Some;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal OptionFrame ToManaged()
            {
                var _managed = new OptionFrame();
                _managed._variant = _variant;
                if (_variant == 0) _managed._Some = _Some._Some.ToManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Some._Some = _Some.ToUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Some._Some = _Some.ToUnmanaged();
            return _unmanaged;
        }

        public static OptionFrame Some(Frame value) => new() { _variant = 0, _Some = value };
        public static OptionFrame None => new() { _variant = 1 };

        public bool IsSome => _variant == 0;
        public bool IsNone => _variant == 1;

        public Frame AsSome() { if (_variant != 0) { throw new InteropException(); } else { return _Some; } }
        public void AsNone() { if (_variant != 1) throw new InteropException(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "Some(...)";
            if (_variant == 1) return "None";
            throw new InteropException();
        }

        [CustomMarshaller(typeof(OptionFrame), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private OptionFrame _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(OptionFrame managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(OptionFrame managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public OptionFrame ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    ///Option that contains Some(value) or None.
    public partial struct OptionOpCallback
    {
        uint _variant;
        OpCallback _Some;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct OptionOpCallback : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedSome
        {
            internal uint _variant;
            internal OpCallback.Unmanaged _Some;
        }


        public void Dispose()
        {
            if (_variant == 0) { _Some.Dispose(); }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedSome _Some;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal OptionOpCallback ToManaged()
            {
                var _managed = new OptionOpCallback();
                _managed._variant = _variant;
                if (_variant == 0) _managed._Some = _Some._Some.ToManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Some._Some = _Some?.ToUnmanaged() ?? default;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Some._Some = _Some?.ToUnmanaged() ?? default;
            return _unmanaged;
        }

        public static OptionOpCallback Some(OpCallback value) => new() { _variant = 0, _Some = value };
        public static OptionOpCallback None => new() { _variant = 1 };

        public bool IsSome => _variant == 0;
        public bool IsNone => _variant == 1;

        public OpCallback AsSome() { if (_variant != 0) { throw new InteropException(); } else { return _Some; } }
        public void AsNone() { if (_variant != 1) throw new InteropException(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "Some(...)";
            if (_variant == 1) return "None";
            throw new InteropException();
        }

        [CustomMarshaller(typeof(OptionOpCallback), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private OptionOpCallback _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(OptionOpCallback managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(OptionOpCallback managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public OptionOpCallback ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    ///Result that contains value or an error.
    public partial class ResultConstPtrIterasmVmUtf8String
    {
        uint _variant;
        IntPtr _Ok;
        Utf8String _Err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class ResultConstPtrIterasmVmUtf8String : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedOk
        {
            internal uint _variant;
            internal IntPtr _Ok;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedErr
        {
            internal uint _variant;
            internal Utf8String.Unmanaged _Err;
        }



        public void Dispose()
        {
            if (_variant == 1) { _Err.Dispose(); }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedOk _Ok;

            [FieldOffset(0)]
            internal UnmanagedErr _Err;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal ResultConstPtrIterasmVmUtf8String IntoManaged()
            {
                var _managed = new ResultConstPtrIterasmVmUtf8String();
                _managed._variant = _variant;
                if (_variant == 0) _managed._Ok = _Ok._Ok;
                if (_variant == 1) _managed._Err = _Err._Err.IntoManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok;
            if (_variant == 1) _unmanaged._Err._Err = _Err.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok;
            if (_variant == 1) _unmanaged._Err._Err = _Err.AsUnmanaged();
            return _unmanaged;
        }

        public static ResultConstPtrIterasmVmUtf8String Ok(IntPtr value) => new() { _variant = 0, _Ok = value };
        public static ResultConstPtrIterasmVmUtf8String Err(Utf8String value) => new() { _variant = 1, _Err = value };
        public static ResultConstPtrIterasmVmUtf8String Panic => new() { _variant = 2 };
        public static ResultConstPtrIterasmVmUtf8String Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public IntPtr AsOk() { if (_variant != 0) { throw new InteropException(); } else { return _Ok; } }
        public Utf8String AsErr() { if (_variant != 1) { throw new InteropException(); } else { return _Err; } }
        public void AsPanic() { if (_variant != 2) throw new InteropException(); }
        public void AsNull() { if (_variant != 3) throw new InteropException(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "Ok(...)";
            if (_variant == 1) return "Err(...)";
            if (_variant == 2) return "Panic";
            if (_variant == 3) return "Null";
            throw new InteropException();
        }

        [CustomMarshaller(typeof(ResultConstPtrIterasmVmUtf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrIterasmVmUtf8String _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultConstPtrIterasmVmUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultConstPtrIterasmVmUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultConstPtrIterasmVmUtf8String ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    ///Result that contains value or an error.
    public partial class ResultI64Utf8String
    {
        uint _variant;
        long _Ok;
        Utf8String _Err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class ResultI64Utf8String : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedOk
        {
            internal uint _variant;
            internal long _Ok;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedErr
        {
            internal uint _variant;
            internal Utf8String.Unmanaged _Err;
        }



        public void Dispose()
        {
            if (_variant == 1) { _Err.Dispose(); }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedOk _Ok;

            [FieldOffset(0)]
            internal UnmanagedErr _Err;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal ResultI64Utf8String IntoManaged()
            {
                var _managed = new ResultI64Utf8String();
                _managed._variant = _variant;
                if (_variant == 0) _managed._Ok = _Ok._Ok;
                if (_variant == 1) _managed._Err = _Err._Err.IntoManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok;
            if (_variant == 1) _unmanaged._Err._Err = _Err.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok;
            if (_variant == 1) _unmanaged._Err._Err = _Err.AsUnmanaged();
            return _unmanaged;
        }

        public static ResultI64Utf8String Ok(long value) => new() { _variant = 0, _Ok = value };
        public static ResultI64Utf8String Err(Utf8String value) => new() { _variant = 1, _Err = value };
        public static ResultI64Utf8String Panic => new() { _variant = 2 };
        public static ResultI64Utf8String Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public long AsOk() { if (_variant != 0) { throw new InteropException(); } else { return _Ok; } }
        public Utf8String AsErr() { if (_variant != 1) { throw new InteropException(); } else { return _Err; } }
        public void AsPanic() { if (_variant != 2) throw new InteropException(); }
        public void AsNull() { if (_variant != 3) throw new InteropException(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "Ok(...)";
            if (_variant == 1) return "Err(...)";
            if (_variant == 2) return "Panic";
            if (_variant == 3) return "Null";
            throw new InteropException();
        }

        [CustomMarshaller(typeof(ResultI64Utf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultI64Utf8String _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultI64Utf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultI64Utf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultI64Utf8String ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    ///Result that contains value or an error.
    public partial struct ResultMutPtrIterasmStateVoid
    {
        uint _variant;
        IntPtr _Ok;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultMutPtrIterasmStateVoid
    {
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedOk
        {
            internal uint _variant;
            internal IntPtr _Ok;
        }





        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedOk _Ok;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal ResultMutPtrIterasmStateVoid ToManaged()
            {
                var _managed = new ResultMutPtrIterasmStateVoid();
                _managed._variant = _variant;
                if (_variant == 0) _managed._Ok = _Ok._Ok;
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok;
            return _unmanaged;
        }

        public static ResultMutPtrIterasmStateVoid Ok(IntPtr value) => new() { _variant = 0, _Ok = value };
        public static ResultMutPtrIterasmStateVoid Err => new() { _variant = 1 };
        public static ResultMutPtrIterasmStateVoid Panic => new() { _variant = 2 };
        public static ResultMutPtrIterasmStateVoid Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public IntPtr AsOk() { if (_variant != 0) { throw new InteropException(); } else { return _Ok; } }
        public void AsErr() { if (_variant != 1) throw new InteropException(); }
        public void AsPanic() { if (_variant != 2) throw new InteropException(); }
        public void AsNull() { if (_variant != 3) throw new InteropException(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "Ok(...)";
            if (_variant == 1) return "Err(...)";
            if (_variant == 2) return "Panic";
            if (_variant == 3) return "Null";
            throw new InteropException();
        }

        [CustomMarshaller(typeof(ResultMutPtrIterasmStateVoid), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultMutPtrIterasmStateVoid _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultMutPtrIterasmStateVoid managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultMutPtrIterasmStateVoid managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultMutPtrIterasmStateVoid ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    ///Result that contains value or an error.
    public partial class ResultOptionFrameUtf8String
    {
        uint _variant;
        OptionFrame _Ok;
        Utf8String _Err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class ResultOptionFrameUtf8String : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedOk
        {
            internal uint _variant;
            internal OptionFrame.Unmanaged _Ok;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedErr
        {
            internal uint _variant;
            internal Utf8String.Unmanaged _Err;
        }



        public void Dispose()
        {
            if (_variant == 0) { _Ok.Dispose(); }
            if (_variant == 1) { _Err.Dispose(); }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedOk _Ok;

            [FieldOffset(0)]
            internal UnmanagedErr _Err;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal ResultOptionFrameUtf8String IntoManaged()
            {
                var _managed = new ResultOptionFrameUtf8String();
                _managed._variant = _variant;
                if (_variant == 0) _managed._Ok = _Ok._Ok.ToManaged();
                if (_variant == 1) _managed._Err = _Err._Err.IntoManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok.ToUnmanaged();
            if (_variant == 1) _unmanaged._Err._Err = _Err.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok.ToUnmanaged();
            if (_variant == 1) _unmanaged._Err._Err = _Err.AsUnmanaged();
            return _unmanaged;
        }

        public static ResultOptionFrameUtf8String Ok(OptionFrame value) => new() { _variant = 0, _Ok = value };
        public static ResultOptionFrameUtf8String Err(Utf8String value) => new() { _variant = 1, _Err = value };
        public static ResultOptionFrameUtf8String Panic => new() { _variant = 2 };
        public static ResultOptionFrameUtf8String Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public OptionFrame AsOk() { if (_variant != 0) { throw new InteropException(); } else { return _Ok; } }
        public Utf8String AsErr() { if (_variant != 1) { throw new InteropException(); } else { return _Err; } }
        public void AsPanic() { if (_variant != 2) throw new InteropException(); }
        public void AsNull() { if (_variant != 3) throw new InteropException(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "Ok(...)";
            if (_variant == 1) return "Err(...)";
            if (_variant == 2) return "Panic";
            if (_variant == 3) return "Null";
            throw new InteropException();
        }

        [CustomMarshaller(typeof(ResultOptionFrameUtf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultOptionFrameUtf8String _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultOptionFrameUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultOptionFrameUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultOptionFrameUtf8String ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    ///Result that contains value or an error.
    public partial class ResultSliceMutU8Utf8String
    {
        uint _variant;
        SliceMutU8 _Ok;
        Utf8String _Err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class ResultSliceMutU8Utf8String : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedOk
        {
            internal uint _variant;
            internal SliceMutU8.Unmanaged _Ok;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedErr
        {
            internal uint _variant;
            internal Utf8String.Unmanaged _Err;
        }



        public void Dispose()
        {
            if (_variant == 0) { _Ok.Dispose(); }
            if (_variant == 1) { _Err.Dispose(); }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedOk _Ok;

            [FieldOffset(0)]
            internal UnmanagedErr _Err;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal ResultSliceMutU8Utf8String IntoManaged()
            {
                var _managed = new ResultSliceMutU8Utf8String();
                _managed._variant = _variant;
                if (_variant == 0) _managed._Ok = _Ok._Ok.ToManaged();
                if (_variant == 1) _managed._Err = _Err._Err.IntoManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok.ToUnmanaged();
            if (_variant == 1) _unmanaged._Err._Err = _Err.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok.ToUnmanaged();
            if (_variant == 1) _unmanaged._Err._Err = _Err.AsUnmanaged();
            return _unmanaged;
        }

        public static ResultSliceMutU8Utf8String Ok(SliceMutU8 value) => new() { _variant = 0, _Ok = value };
        public static ResultSliceMutU8Utf8String Err(Utf8String value) => new() { _variant = 1, _Err = value };
        public static ResultSliceMutU8Utf8String Panic => new() { _variant = 2 };
        public static ResultSliceMutU8Utf8String Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public SliceMutU8 AsOk() { if (_variant != 0) { throw new InteropException(); } else { return _Ok; } }
        public Utf8String AsErr() { if (_variant != 1) { throw new InteropException(); } else { return _Err; } }
        public void AsPanic() { if (_variant != 2) throw new InteropException(); }
        public void AsNull() { if (_variant != 3) throw new InteropException(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "Ok(...)";
            if (_variant == 1) return "Err(...)";
            if (_variant == 2) return "Panic";
            if (_variant == 3) return "Null";
            throw new InteropException();
        }

        [CustomMarshaller(typeof(ResultSliceMutU8Utf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultSliceMutU8Utf8String _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultSliceMutU8Utf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultSliceMutU8Utf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultSliceMutU8Utf8String ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    ///Result that contains value or an error.
    public partial class ResultSliceU8Utf8String
    {
        uint _variant;
        SliceU8 _Ok;
        Utf8String _Err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class ResultSliceU8Utf8String : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedOk
        {
            internal uint _variant;
            internal SliceU8.Unmanaged _Ok;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedErr
        {
            internal uint _variant;
            internal Utf8String.Unmanaged _Err;
        }



        public void Dispose()
        {
            if (_variant == 0) { _Ok.Dispose(); }
            if (_variant == 1) { _Err.Dispose(); }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedOk _Ok;

            [FieldOffset(0)]
            internal UnmanagedErr _Err;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal ResultSliceU8Utf8String IntoManaged()
            {
                var _managed = new ResultSliceU8Utf8String();
                _managed._variant = _variant;
                if (_variant == 0) _managed._Ok = _Ok._Ok.ToManaged();
                if (_variant == 1) _managed._Err = _Err._Err.IntoManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok.ToUnmanaged();
            if (_variant == 1) _unmanaged._Err._Err = _Err.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok.ToUnmanaged();
            if (_variant == 1) _unmanaged._Err._Err = _Err.AsUnmanaged();
            return _unmanaged;
        }

        public static ResultSliceU8Utf8String Ok(SliceU8 value) => new() { _variant = 0, _Ok = value };
        public static ResultSliceU8Utf8String Err(Utf8String value) => new() { _variant = 1, _Err = value };
        public static ResultSliceU8Utf8String Panic => new() { _variant = 2 };
        public static ResultSliceU8Utf8String Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public SliceU8 AsOk() { if (_variant != 0) { throw new InteropException(); } else { return _Ok; } }
        public Utf8String AsErr() { if (_variant != 1) { throw new InteropException(); } else { return _Err; } }
        public void AsPanic() { if (_variant != 2) throw new InteropException(); }
        public void AsNull() { if (_variant != 3) throw new InteropException(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "Ok(...)";
            if (_variant == 1) return "Err(...)";
            if (_variant == 2) return "Panic";
            if (_variant == 3) return "Null";
            throw new InteropException();
        }

        [CustomMarshaller(typeof(ResultSliceU8Utf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultSliceU8Utf8String _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultSliceU8Utf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultSliceU8Utf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultSliceU8Utf8String ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    ///Result that contains value or an error.
    public partial class ResultU64Utf8String
    {
        uint _variant;
        ulong _Ok;
        Utf8String _Err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class ResultU64Utf8String : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedOk
        {
            internal uint _variant;
            internal ulong _Ok;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedErr
        {
            internal uint _variant;
            internal Utf8String.Unmanaged _Err;
        }



        public void Dispose()
        {
            if (_variant == 1) { _Err.Dispose(); }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedOk _Ok;

            [FieldOffset(0)]
            internal UnmanagedErr _Err;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal ResultU64Utf8String IntoManaged()
            {
                var _managed = new ResultU64Utf8String();
                _managed._variant = _variant;
                if (_variant == 0) _managed._Ok = _Ok._Ok;
                if (_variant == 1) _managed._Err = _Err._Err.IntoManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok;
            if (_variant == 1) _unmanaged._Err._Err = _Err.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok;
            if (_variant == 1) _unmanaged._Err._Err = _Err.AsUnmanaged();
            return _unmanaged;
        }

        public static ResultU64Utf8String Ok(ulong value) => new() { _variant = 0, _Ok = value };
        public static ResultU64Utf8String Err(Utf8String value) => new() { _variant = 1, _Err = value };
        public static ResultU64Utf8String Panic => new() { _variant = 2 };
        public static ResultU64Utf8String Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public ulong AsOk() { if (_variant != 0) { throw new InteropException(); } else { return _Ok; } }
        public Utf8String AsErr() { if (_variant != 1) { throw new InteropException(); } else { return _Err; } }
        public void AsPanic() { if (_variant != 2) throw new InteropException(); }
        public void AsNull() { if (_variant != 3) throw new InteropException(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "Ok(...)";
            if (_variant == 1) return "Err(...)";
            if (_variant == 2) return "Panic";
            if (_variant == 3) return "Null";
            throw new InteropException();
        }

        [CustomMarshaller(typeof(ResultU64Utf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultU64Utf8String _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultU64Utf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultU64Utf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultU64Utf8String ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    ///Result that contains value or an error.
    public partial class ResultUtf8String
    {
        uint _variant;
        Utf8String _Err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class ResultUtf8String : IDisposable
    {

        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedErr
        {
            internal uint _variant;
            internal Utf8String.Unmanaged _Err;
        }



        public void Dispose()
        {
            if (_variant == 1) { _Err.Dispose(); }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedErr _Err;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal ResultUtf8String IntoManaged()
            {
                var _managed = new ResultUtf8String();
                _managed._variant = _variant;
                if (_variant == 1) _managed._Err = _Err._Err.IntoManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 1) _unmanaged._Err._Err = _Err.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 1) _unmanaged._Err._Err = _Err.AsUnmanaged();
            return _unmanaged;
        }

        public static ResultUtf8String Ok => new() { _variant = 0 };
        public static ResultUtf8String Err(Utf8String value) => new() { _variant = 1, _Err = value };
        public static ResultUtf8String Panic => new() { _variant = 2 };
        public static ResultUtf8String Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public void AsOk() { if (_variant != 0) throw new InteropException(); }
        public Utf8String AsErr() { if (_variant != 1) { throw new InteropException(); } else { return _Err; } }
        public void AsPanic() { if (_variant != 2) throw new InteropException(); }
        public void AsNull() { if (_variant != 3) throw new InteropException(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "Ok(...)";
            if (_variant == 1) return "Err(...)";
            if (_variant == 2) return "Panic";
            if (_variant == 3) return "Null";
            throw new InteropException();
        }

        [CustomMarshaller(typeof(ResultUtf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultUtf8String _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultUtf8String ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate OptionOpCallback.Unmanaged CustomOpsCallbackNative(Utf8String.Unmanaged op, IntPtr callback_data); // 'True' native callback signature
    public delegate OptionOpCallback CustomOpsCallbackDelegate(Utf8String op); // Our C# signature

    public partial class CustomOpsCallback
    {
        private CustomOpsCallbackDelegate _managed; // C# callback
        private CustomOpsCallbackNative _native; // Native callback
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CustomOpsCallback : IDisposable
    {

        internal CustomOpsCallback() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public CustomOpsCallback(CustomOpsCallbackDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private OptionOpCallback.Unmanaged CallTrampoline(Utf8String.Unmanaged op, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(op.IntoManaged()).ToUnmanaged();
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        // Invokes the callback.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal OptionOpCallback Call(Utf8String op)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<CustomOpsCallbackNative>(_ptr);
            // TODO
            // return __target(op.IntoManaged());
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged ToUnmanaged()
        {
            var rval = new Unmanaged();
            rval._callback = _ptr;
            rval._data = IntPtr.Zero;
            return rval;
        }

        [CustomMarshaller(typeof(CustomOpsCallback), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _callback;
            internal IntPtr _data;

            public CustomOpsCallback ToManaged()
            {
                var rval = new CustomOpsCallback();
                rval._ptr = _callback;
                return rval;
            }

        }

        public ref struct Marshaller
        {
            private CustomOpsCallback _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(CustomOpsCallback managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(CustomOpsCallback managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public CustomOpsCallback ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate ResultUtf8String.Unmanaged OpCallbackNative(IntPtr state, long args, IntPtr callback_data); // 'True' native callback signature
    public delegate ResultUtf8String OpCallbackDelegate(IntPtr state, long args); // Our C# signature

    public partial class OpCallback
    {
        private OpCallbackDelegate _managed; // C# callback
        private OpCallbackNative _native; // Native callback
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class OpCallback : IDisposable
    {

        internal OpCallback() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public OpCallback(OpCallbackDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private ResultUtf8String.Unmanaged CallTrampoline(IntPtr state, long args, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(state, args).IntoUnmanaged();
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        // Invokes the callback.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal ResultUtf8String Call(IntPtr state, long args)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<OpCallbackNative>(_ptr);
            // TODO
            // return __target(state, args);
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged ToUnmanaged()
        {
            var rval = new Unmanaged();
            rval._callback = _ptr;
            rval._data = IntPtr.Zero;
            return rval;
        }

        [CustomMarshaller(typeof(OpCallback), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _callback;
            internal IntPtr _data;

            public OpCallback ToManaged()
            {
                var rval = new OpCallback();
                rval._ptr = _callback;
                return rval;
            }

        }

        public ref struct Marshaller
        {
            private OpCallback _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(OpCallback managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(OpCallback managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public OpCallback ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    // This must be a class because we only ever want to hold on to the
    // same instance, as we overwrite fields when this is sent over the FFI
    // boundary
    public partial class VecUtf8String
    {
        internal IntPtr _ptr;
        internal ulong _len;
        internal ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class VecUtf8String : IDisposable
    {
        // An internal helper to create an empty object.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private VecUtf8String() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecUtf8String From(Span<Utf8String> _data)
        {
            var _temp = new Utf8String.Unmanaged[_data.Length];
            for (var i = 0; i < _data.Length; ++i)
            {
                _temp[i] = _data[i].IntoUnmanaged();
            }
            fixed (void* _data_ptr = _temp)
            {
                InteropHelper.interoptopus_vec_create((IntPtr) _data_ptr, (ulong)_data.Length, out var _out);
                return _out.IntoManaged();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecUtf8String Empty()
        {
            InteropHelper.interoptopus_vec_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get { if (_ptr == IntPtr.Zero) { throw new InteropException(); } else { return (int) _len; } }
        }

        public unsafe Utf8String this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_ptr == IntPtr.Zero) throw new InteropException();
                var _element = Marshal.PtrToStructure<Utf8String.Unmanaged>(new IntPtr(_ptr.ToInt64() + i * sizeof(Utf8String.Unmanaged)));
                return _element.IntoManaged();
            }
        }
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            _ptr = IntPtr.Zero; // Mark this instance as moved.
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_vec_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
            _len = 0;
            _capacity = 0;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "VecUtf8String { ... }";
        }


        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_create_12067441055402414473")]
            internal static partial long interoptopus_vec_create(IntPtr vec, ulong len, out Unmanaged rval);
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_destroy_6640468371169161290")]
            internal static partial long interoptopus_vec_destroy(Unmanaged vec);
        }

        [CustomMarshaller(typeof(VecUtf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _ptr;
            internal ulong _len;
            internal ulong _capacity;
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecUtf8String IntoManaged()
            {
                var rval = new VecUtf8String();
                rval._len = _len;
                rval._capacity = _capacity;
                rval._ptr = _ptr;
                return rval;
            }


        }

        public ref struct Marshaller
        {
            private VecUtf8String _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(VecUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(VecUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecUtf8String ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }

    }

    public static class VecUtf8StringExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static VecUtf8String IntoVec(this Utf8String[] s) { return VecUtf8String.From(s); }
    }



    public partial class IterasmVm : IDisposable
    {
        private IntPtr _context;

        private IterasmVm() {}

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static IterasmVm Compile(Utf8String src, CustomOpsCallback custom_ops)
        {
            var self = new IterasmVm();
            self._context = Interop.iterasm_vm_compile(src, custom_ops).AsOk();
            return self;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            Interop.iterasm_vm_destroy(_context).AsOk();
            _context = IntPtr.Zero;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void RunToCompletion()
        {
            Interop.iterasm_vm_run_to_completion(_context).AsOk();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void RunStep()
        {
            Interop.iterasm_vm_run_step(_context).AsOk();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public IntPtr GetState()
        {
            return Interop.iterasm_vm_get_state(_context).AsOk();
        }

        public IntPtr Context => _context;
    }



    public class InteropException : Exception
    {
        public InteropException() : base()
        {
        }
    }
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void AsyncHelperNative(IntPtr data, IntPtr callback_data);
    public delegate void AsyncHelperDelegate(IntPtr data);

    public partial struct AsyncHelper
    {
        private AsyncHelperDelegate _managed;
        private AsyncHelperNative _native;
        private IntPtr _ptr;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct AsyncHelper : IDisposable
    {
        public AsyncHelper() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public AsyncHelper(AsyncHelperDelegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        void Call(IntPtr data, IntPtr _)
        {
            _managed(data);
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_ptr);
            _ptr = IntPtr.Zero;
        }

        [CustomMarshaller(typeof(AsyncHelper), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private AsyncHelper _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(AsyncHelper managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed._ptr;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public AsyncHelper ToManaged()
            {
                _managed = new AsyncHelper();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }
    }

    public delegate void AsyncCallbackCommon(IntPtr data, IntPtr callback_data);

    [StructLayout(LayoutKind.Sequential)]
    public partial struct AsyncCallbackCommonNative
    {
        internal IntPtr _ptr;
        internal IntPtr _ts;
    }
    public partial class Utf8String
    {
        IntPtr _ptr;
        ulong _len;
        ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Utf8String : IDisposable
    {
        private Utf8String() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe Utf8String From(string s)
        {
            var rval = new Utf8String();
            var source = s.AsSpan();
            Span<byte> utf8Bytes = stackalloc byte[Encoding.UTF8.GetByteCount(source)];
            var len = Encoding.UTF8.GetBytes(source, utf8Bytes);

            fixed (byte* p = utf8Bytes)
            {
                InteropHelper.interoptopus_string_create((IntPtr)p, (ulong)len, out var native);
                rval._ptr = native._ptr;
                rval._len = native._len;
                rval._capacity = native._capacity;
            }

            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe Utf8String Empty()
        {
            InteropHelper.interoptopus_string_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }


        public unsafe string String
        {
            get
            {
                var span = new ReadOnlySpan<byte>((byte*)_ptr, (int)_len);
                var s = Encoding.UTF8.GetString(span);
                return s;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public string IntoString()
        {
            var rval = String;
            Dispose();
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_string_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Utf8String Clone()
        {
            var _new = new Unmanaged();
            var _this = AsUnmanaged();
            InteropHelper.interoptopus_string_clone(ref _this, ref _new);
            return _new.IntoManaged();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) { throw new Exception(); }
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            _ptr = IntPtr.Zero;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr _ptr;
            public ulong _len;
            public ulong _capacity;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Utf8String IntoManaged()
            {
                var _managed = new Utf8String();
                _managed._ptr = _ptr;
                _managed._len = _len;
                _managed._capacity = _capacity;
                return _managed;
            }

        }

        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_create")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public static partial long interoptopus_string_create(IntPtr utf8, ulong len, out Unmanaged rval);

            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_destroy")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public static partial long interoptopus_string_destroy(Unmanaged utf8);

            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_clone")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public static partial long interoptopus_string_clone(ref Unmanaged orig, ref Unmanaged cloned);
        }

        [CustomMarshaller(typeof(Utf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Utf8String _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Utf8String managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Utf8String managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public unsafe Unmanaged ToUnmanaged()
            {
                return _managed.IntoUnmanaged();
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public unsafe Utf8String ToManaged()
            {
                return _unmanaged.IntoManaged();
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }
    }

    public static class StringExtensions
    {
        public static Utf8String Utf8(this string s) { return Utf8String.From(s); }
    }
}
